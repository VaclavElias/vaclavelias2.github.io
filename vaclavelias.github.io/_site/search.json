[
{
    "title":"Configuration experiment in ASP.NET Core â€“ RemoteJsonFile",
    "excerpt": "This is an experiment project to access **appsettings.json** from Azure Blob or any remote url. ",
    "author": "",
    "date": "June 01, 2019",
    "category": "",
    "tags": "blog, search, C#, ASP.NET-Core",
    "url":"https://www.vaclavelias.com/dotnet/configuration-experiment-aspnet.core-remote-json-file/",
    "content":"This is an experiment project to access appsettings.json from Azure Blob or any remote url.I will use public access to this Azure file considering no user secrets are included in this file. You would need to add additional options to secure your link if any user secrets are transmitted.Example url: https://your-storage.blob.core.windows.net/your-blob/appsettings.jsonservices.AddRemoteJsonFile(Configuration, \"AppSettings:Url:RemoteUrl\", options =>{ Configuration = options;});Source here CodeCapital.AspNetCore.Extensions.Configuration.Json."
  },{
    "title":"Visual Studio Debugger Enumerable Visualizer",
    "excerpt": "Visual Studio Debugger Enumerable Visualizer without any `[Serialize]` attribute, using Json was an experiment to get a better experience when debugging IEnumerables. ",
    "author": "",
    "date": "June 11, 2019",
    "category": "",
    "tags": "blog, search, C#, Visual-Studio",
    "url":"https://www.vaclavelias.com/dotnet/visual-studio-debugger-enumerable-visualizer/",
    "content":"Visual Studio Debugger Enumerable Visualizer without any [Serialize] attribute, using Json was an experiment to get a better experience when debugging IEnumerables. This is now inbuilt in Visual Studio 2022 from version 17.2. {: .img-fluid}{: .img-fluid}Read more about my implementation here EnumerableVisualizer."
  },{
    "title":"Jazor experiment",
    "excerpt": " This experiment library helps with very common actions on the website which involve repeating JavaScript code across multiple different projects. ",
    "author": "",
    "date": "October 31, 2020",
    "category": "",
    "tags": "blog, search, TypeScript, ASP.NET-Core, Advance",
    "url":"https://www.vaclavelias.com/dotnet/jazor-experiment/",
    "content":"This experiment library helps with very common actions on the website which involve repeating JavaScript code across multiple different projects.Click a button or a link, do something in the backend and UI. This library takes an approach rather updating whole HTML blocks than granular tags with JSON and JavaScript libraries, so there is no need fiddling and mapping JSON objects to whatever UI you have.You might find this approach useful in certain project cases if you want to write minimum or no JavaScript. Still, JavaScript knowledge is requiredÂ in certain scenarios.There is a crossover with Blazor or rather Jazor is filling a gap between static HTML/Razor pages and Blazor.When could you possibly use this library and not necessarily Blazor?You have got many Partial views in Razor pages and views which you would like to reuse e.g.public IActionResult OnGetNews() => Partial(\"_NewsPartial\", 10);You would like a hybrid of your current website and add simple SPA functionalityYour project doesn't require minimising traffic in between the browser and serverThis library is using currently:TypeScript to handle all common actions workloadASP.NET Core 5.0 TagHelpers to simplify using data- and a bit help with strongly typed Controllers and ActionsGitHub link https://github.com/VaclavElias/JazorRequirements ðŸ”—Add jazor.js to your Razor page or _Layout.Add @addTagHelper *, Jazor to your _ViewImports.cshtmlToDo ðŸ”—Add more functionalityMake prompts and spinners pluggableExamples ðŸ”—I will be using Bootstrap in my examples.Example 1 ðŸ”—Load multiple delayed HTML / Partial Views.Load News partLoad Top News part after 1 secondThis will load your HTML from your desired url&lt;div jazor-url=\"/examples/news\">Loading...&lt;/div>&lt;div jazor-url=\"@((nameof(ExamplesController), nameof(ExamplesController.TopNews), null))\" jazor-delay=\"1\">Loading...&lt;/div>Example 2 ðŸ”—Click a button or link to load HTML / Partial Views to your target element.&lt;button jazor-click=\"/examples/itnews\" jazor-target=\"content\" type=\"button\" class=\"btn btn-primary\">Show .NET News&lt;/div>&lt;button jazor-click=\"@((nameof(ExamplesController), nameof(ExamplesController.AngularNews), null))\" jazor-target=\"content\" type=\"button\" class=\"btn btn-primary\">Show Angular News&lt;/button>&lt;div id=\"content\">The content will be loaded here.&lt;/div>"
  },{
    "title":"Visual Studio Intro",
    "excerpt": " This intro is a **quick reference** and it should help you to familiarise quickly with the key and essential **Visual Studio** (VS) functionality. ",
    "author": "",
    "date": "April 03, 2021",
    "category": "",
    "tags": "blog, search, C#, Visual-Studio, Beginner",
    "url":"https://www.vaclavelias.com/dotnet/visual-studio-intro/",
    "content":"This intro is a quick reference and it should help you to familiarise quickly with the key and essential Visual Studio (VS) functionality.The VS Integrated Development Environment (IDE) might look overwhelming in the beginning but there is no need to know everything. More you work with VS you will start discovering what you need and you will eventually understand the complexity of VS by passive learning.Initial notes:You should already be familiar with any coding/development IDEThis is not a tutorial, this is a quick reference on what is the most important or helpful to know when you start working with Visual Studio. Do check any available material to familiarise and learn if you don't understand this guideIf you don't know certain terms just google themContent ðŸ”—1. Solution vs Project2. Opening Solution / Project3. Solution Explorer4. Windows Management5. F12 is your friend - Go to Definition6. CTRL+T and CTRL+Q - Search Everywhere7. dotnet command8. Project story - Viewing csproj in summary9. Project Packages (nuget)10. Visual Studio Extensions11. Visual Studio SettingsQ&amp;A1. Solution vs Project ðŸ”—Solution contains 1 or more projects to logically organise your projects together.2. Opening Solution / Project ðŸ”—You can open a project by clicking on a file with extension .sln (solution) or .csproj (C# project). If you open a project which is part of a solution, the solution might open instead automatically.3. Solution Explorer ðŸ”—Once you open your Solution or Project you want to see your Solution Explorer which contains a logical hierarchy of all folders and files which are needed to build your project. You are going to use this window and navigate through it very frequently. Usually you would have your Solution Explorer on the right or on the left always visible.Note: If you cannot see it go to Menu â†’ View â†’ Click Solution Explorer (first in the menu)4. Windows Management ðŸ”—You might use these options below frequently to arrange your windows. More info about customising layouts.Vertical Document Group - If you need to see different files next to each other {: .img-fluid}Horizontal Document Group - If you need to see different files horizontallySplit Window - You can split horizontally the edition of a file through Window â†’ Split. This is especially useful when visualizing or editing two locations in a large file {: .img-fluid} {: .img-fluid}New Window - Open an instance of the same file in a separate window, Window â†’ New Window5. F12 is your friend - Go to Definition ðŸ”—The Go To Definition feature navigates to the source of a type or member, and opens the result in a new tab.Pressing F12 while your text cursor is somewhere inside the symbol nameRight click mouse on the symbol â†’ Go to DefinitionOr ALT+F12 to peek the identifier definition without opening a new tab6. CTRL+T and CTRL+Q - Search Everywhere ðŸ”—CTRL+Q - Search everywhere in the code, including menu itemsCTRL+T - Search everywhere in the code7. dotnet command ðŸ”—It provides commands for working with .NET projectse.g. dotnet build builds a projecte.g. dotnet --info shows detailed information about a .NET installationIt runs .NET applicationse.g. dotnet myApplication.exe or dotnet myApplication.dll8. Project story - Viewing csproj in summary ðŸ”—.NET projects are based on the MSBuild format. Project files, which have extensions like .csproj for C# project are in XML format. The csproj file includes settings related to targeted .NET Frameworks, project folders, NuGet package references etc.You can edit in 2 waysSolution Explorer â†’ Select your project â†’ Right Click â†’ Select Edit Project FileSolution Explorer â†’ Double click on the project name9. Project Packages (nuget) ðŸ”—An essential tool for any modern development platform is a mechanism through which developers can create, share, and consume useful code. Often such code is bundled into &quot;packages&quot; that contain compiled code (as DLLs) along with other content needed in the projects that consume these packages (source An introduction to Nuget).For .NET (including .NET Core), the Microsoft-supported mechanism for sharing code is NuGet (essentially a single ZIP file) with the .nupkg extension.Solution Explorer â†’ Right click on Projectâ†’ Manage Nuget PackagesBrowse - Search for new packagesInstalled - See your installed packagesUpdates - See current updates for your installed packages (mind minor vs major updates)10. Visual Studio Extensions ðŸ”—Extensions allow you to customize and enhance your experience in Visual Studio by adding new features or integrating existing tools (Amazon, Azure, ..). The main purpose is to increase your productivity and cater to your workflow.Top Menu â†’ Extensions â†’ Manage ExtensionsInstalled - All installed and pre-installed extensionsOnline - Search for new extensionsUpdates - Update extensions, some extensions update automaticallyRoaming Extensions Manager - If you are logged into Visual Studio with your Microsoft account you can sync your extensions to other devices with Visual StudioTop free extensions for developmentCodeMaidProductivity Power Tools 2019/2022 - Installs a few individual extensions for your productivityLive Share - Real-time collaborative development in Visual Studio and Visual Studio CodeWeb Essentials 2019/2022 - Installs a few individual extensions for your web developmentAWS Toolkit - If you work/deploy to AWS11. Visual Studio Settings ðŸ”—Top Menu â†’ Edit â†’ Advance â†’ Word WrapVery useful so you don't need to move your horizontal barTop Menu â†’ Toolsâ†’ Options â†’ Projects and Solutions â†’ Track Active Item in Solution Explorer -Solution Explorer item is selected automatically when you edit the file in the EditorTop Menu â†’ Toolsâ†’ Options â†’ Productivity Power Tools (Extension) â†’ Power Commands â†’ Remove and Sort Using on saveQ&amp;A ðŸ”—Q: How to create a new project within the solution? ðŸ”—A1: Solution Explorer â†’ Right click on Solution â†’ Add â†’ New project or Existing ProjectA2: Top Menu â†’ File â†’ Add â†’ New project or Existing ProjectQ: How to change the .NET version? ðŸ”—A1: Double click on the project file to open the project as XML and edit the &lt;TargetFramework&gt;net5.0&lt;/TargetFramework&gt; tag.A2: Solution Explorer â†’ Right Click on the Project â†’ Click Properties â†’ Click Application â†’ Change Target Framework"
  },{
    "title":"Visual Studio Advance",
    "excerpt": " This post is a **quick reference** and should help you to familiarise quickly with the key and essential **Visual Studio** (VS) functionality. ",
    "author": "",
    "date": "May 24, 2021",
    "category": "",
    "tags": "blog, search, C#, Visual-Studio, Advance",
    "url":"https://www.vaclavelias.com/dotnet/visual-studio-advance/",
    "content":"This post is a quick reference and should help you to familiarise quickly with the key and essential Visual Studio (VS) functionality.The VS Integrated Development Environment (IDE) might look overwhelming in the beginning but there is no need to know everything. More you work with VS you will start discovering what you need and you will eventually understand the complexity of VS by passive learning.Initial notes:You should already be familiar with any coding/development IDEThis is not a tutorial, this is a quick reference on what is the most important or helpful to know when you start working with Visual Studio. Do check any available material to familiarise and learn if you don't understand this guideIf you don't know certain terms just google themContent ðŸ”—1. Solution vs Project2. Solution Explorer3. Sharing your Code4. Default Configuration - AppSettings.cs / appsettings.json5. Manage User Secrets6. editorconfigQ&amp;A1. Solution vs Project ðŸ”—Depends on your circumstances and your team workflow, you might find different (sometimes confusing) folder structure patterns.VS projects can be in different physical locations on your drive and your VS solution is referencing them wherever the projects are. You can also have multiple solutions *.sln if you need to reference/view projects in different ways. Many projects will be grouped together in their parent folder.Your solution projects might be independent from each other or some of them might have dependencies. The circular dependencies are not allowed and it is an anti-pattern.There are many ways to organise your solution. If you work in a team or alone, consistency is important.See some basic folder structure examples:Example 1 - Projects in one repository - Mono-repo ðŸ”—This example is showing independent projects with no project dependencies, which are grouped together in the api-bureau.sln solution. The intention might be to extract a common library which will be used by all projects. All projects are in the same repository to simplify a workflow for the small team who needs to work across all projects./api-bureau/api-bureau/api-bureau.sln/api-bureau/.gitignore/api-bureau/src/ApiBureau.CloudCall.Api/api-bureau/src/ApiBureau.Confluence.Api/api-bureau/src/ApiBureau.SharePoint.Api/api-bureau/test/ApiBureau.CloudCall.Api.UnitTests/api-bureau/test/ApiBureau.Confluence.Api.UnitTests/api-bureau/test/ApiBureau.SharePoint.Api.UnitTestsExample 2 - Projects in multiple repositories ðŸ”—This example is showing projects, which are grouped together in the ApiBureau.AllApis.sln solution. The only dependency is that all-apis project is dependent on all other APIs. The teams working mostly independently prefer to have their repos separated.Note: Visual Studio 2022+ supports managing multiple repositories from one solution./api-bureau/api-bureau/all-apis/.gitignore/api-bureau/all-apis/ApiBureau.AllApis.sln/api-bureau/all-api/src/ApiBureau.AllApis.Console/api-bureau/cloudcall-api/.gitignore/api-bureau/cloudcall-api/ApiBureau.CloudCall.sln/api-bureau/cloudcall-api/src/ApiBureau.CloudCall.Api/api-bureau/cloudcall-api/test/ApiBureau.CloudCall.Api.UnitTests/api-bureau/confluence-api/.gitignore/api-bureau/confluence-api/ApiBureau.Confluence.sln/api-bureau/confluence-api/src/ApiBureau.Confluence.Api/api-bureau/confluence-api/test/ApiBureau.Confluence.Api.UnitTests/api-bureau/sharepoint-api/.gitignore/api-bureau/sharepoint-api/ApiBureau.SharePoint.sln/api-bureau/sharepoint-api/src/ApiBureau.SharePoint.Api/api-bureau/sharepoint-api/test/ApiBureau.SharePoint.Api.UnitTests2. Solution Explorer ðŸ”—By default your Solution Explorer is showing only the most relevant files. And some files e.g., *.cs will automatically appear in your Solution Explorer when you copy a file to your project folder or create a new C# file.Some files e.g., .gitignore are hidden in the Solution Explorer so they don't distract you. It is good to familiarise yourself with the project folders and files. You can toggle these files by:Solution Explorer Toolbar â†’ Click Show All FilesOr you can see all files on your drive through File Explorer:Solution Explorer â†’ Right click on Solution -&gt; Open Folder in File ExplorerIf you don't use Solution Explorer, you can collapse this window to a vertical bar on the side of your screen. This is helpful when you share a screen, to get more visibility of your code.Solution Explorer â†’ Click the Auto Hide pin iconTo reverse, click the vertical bar, then Solution Explorer and then pin icon again.More Solution Explorer resources.3. Live Sharing your Code - Collaborative Coding ðŸ”—You are becoming familiar with VS and one day you need a help with your code. Your colleague or friend doesn't have the project you are working on, maybe they don't have VS but they have Visual Studio Code. Now you can share your VS session with anyone. Your colleagues will see exactly what you see, or they can navigate independently without downloading your project.Live Share lets you collaboratively explore, edit and debug with others in real time, regardless of what programming languages you're using or app types you're building.Read more about Live Sharing.4. Default Configuration - AppSettings.cs / appsettings.json ðŸ”—Application configuration is a huge subject. If you are working with ASP.NET Core, get familiar with appsettings.json and also with AppSettings.cs. IOptions&lt;AppSettings&gt; will let you use your configuration through strongly typed settings and dependency injection..NET has lots of helpers and methods which will simplify access to your configuration and you can use them also outside of ASP.NET Core applications, e.g., Console Application.Very important is the sequence of configuration providers:appsettings.jsonappsettings.{Environment}.jsonUser secretsEnvironment variablesCommand-line argumentsLots of reading on this subject here Application Configuration.5. Manage User Secrets ðŸ”—Any passwords, secrets, any information you don't want to share has to be secured and not committed to your source control system like Git. How do you do it in VS? Very easily.Solution Explorer â†’ Select your project â†’ Right Click â†’ Select Manage User SecretsVS might ask to install this NuGet Microsoft.Extensions.Configuration.UserSecrets or it will open file secrets.json.You can use also .NET CLI to manage this fileFile secrets.json is kept outside of your VS projects and solution and it is never pushed to your git repository. Note, that this file is not encrypted. It is a plain text file, still hanging on your computer in this location:%APPDATA%\\Microsoft\\UserSecrets\\&lt;user_secrets_id&gt;\\secrets.jsonRead more about Secrets in development subject.6. editorconfig ðŸ”—If you work alone or in a team, code consistency is very important in each project.You can add an EditorConfig file to your project or codebase to enforce consistent coding styles for everyone that works in the codebase. Do ask your colleagues and propose this process if it is not in place. Consistency helps with readability across all projects.More about this subject here Settings with EditorConfig.Q&amp;A ðŸ”—Q: How to change the .NET version? ðŸ”—A1: Double click on the project file to open the project as XML and edit the &lt;TargetFramework&gt;net5.0&lt;/TargetFramework&gt; tag. You can also target multiple frameworks by replacing this tag with &lt;TargetFrameworks&gt;net5.0;net6.0&lt;/TargetFrameworks&gt; tag."
  },{
    "title":"Stride minimal API / Code only approach",
    "excerpt": "**12 lines** of code, this is what it takes to run Stride 3D example below (plus some `usings` on the top). ",
    "author": "",
    "date": "May 13, 2022",
    "category": "",
    "tags": "blog, search, C#, Stride3D, .NET, Game",
    "url":"https://www.vaclavelias.com/stride3d/stride3d-minimal-api-code-only/",
    "content":"12 lines of code, this is what it takes to run Stride 3D example below (plus some usings on the top).This works only with Stride 4.1+.Follow the steps in this stride-code-only repository.Related tweet.using var game = new Game();game.Run(start: (Scene rootScene) =>{ game.SetupBase3DScene(); var entity = new Entity(new Vector3(1f, 0.5f, 3f)); entity.Add(new ModelComponent(new CubeProceduralModel().Generate(game.Services))); entity.Scene = rootScene;});"
  },{
    "title":"Blog Archive - Vaclav Elias",
    "excerpt": "Blog Archive ",
    "author": "",
    "date": "",
    "category": "",
    "tags": "search",
    "url":"https://www.vaclavelias.com/archive/",
    "content":"Blog ArchiveArchive ðŸ”—2022Dec 19 C# code reference in 11tyMay 13 Stride minimal API / Code only approach2021May 24 Visual Studio AdvanceApr 03 Visual Studio Intro2020Oct 31 Jazor experiment2019Jun 11 Visual Studio Debugger Enumerable VisualizerJun 01 Configuration experiment in ASP.NET Core â€“ RemoteJsonFile"
  },{
    "title":"Blog Tags - Vaclav Elias",
    "excerpt": "Blog Tags ",
    "author": "",
    "date": "",
    "category": "",
    "tags": "search",
    "url":"https://www.vaclavelias.com/tags/",
    "content":"Blog TagsTags ðŸ”— .NET Stride minimal API / Code only approachC# code reference in 11ty ASP.NET Core Configuration experiment in ASP.NET Core â€“ RemoteJsonFileJazor experiment Advance Jazor experimentVisual Studio Advance Beginner Visual Studio Intro C# Configuration experiment in ASP.NET Core â€“ RemoteJsonFileVisual Studio Debugger Enumerable VisualizerVisual Studio IntroVisual Studio AdvanceStride minimal API / Code only approachC# code reference in 11ty Game Stride minimal API / Code only approach Stride3D Stride minimal API / Code only approach TypeScript Jazor experiment Visual Studio Visual Studio Debugger Enumerable VisualizerVisual Studio IntroVisual Studio Advance "
  },{
    "title":"C# code reference in 11ty",
    "excerpt": "",
    "author": "",
    "date": "December 19, 2022",
    "category": "",
    "tags": "blog, search, C#, .NET",
    "url":"https://www.vaclavelias.com/dotnet/code-reference-example/",
    "content":"var builder = WebApplication.CreateBuilder(args);var app = builder.Build();app.MapGet(\"/\", () => \"Hello World!\");app.Run();[!code-csharpAnimationBasics]"
  }
]